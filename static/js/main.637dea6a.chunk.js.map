{"version":3,"sources":["components/cells/Cell.js","components/row/Row.js","components/board/Board.js","components/boardhead/BoardHead.js","Minesweeper.js","index.js"],"names":["Cell","props","data","isOpen","hasMine","react_default","a","createElement","className","onContextMenu","e","preventDefault","onClick","open","src","alt","count","flag","hasFlag","Row","cells","map","index","cells_Cell","key","Board","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","createBoard","board","i","rows","push","j","columns","x","y","mines","randomRow","Math","floor","random","randomCol","cell","status","state","setState","changeFlagAmount","Promise","resolve","findMines","then","numOfMines","current","openCells","console","log","newRows","handleCellClick","findAroundCell","endGame","minesInProximity","row","col","length","nextProps","_this2","row_Row","Component","BoardHead","minutes","time","seconds","formatedSeconds","concat","timer","flags","reset","Minesweeper","checkForWinner","alert","intervals","clearInterval","assign","baseState","tick","setInterval","f","t","hanldeCellClick","prevState","amount","nextState","boardhead_BoardHead","board_Board","ReactDOM","render","Minesweeper_Minesweeper","document","getElementById"],"mappings":"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","file":"static/js/main.637dea6a.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Cell = props => {\r\n  let cell = () => {\r\n    if (props.data.isOpen) {\r\n      if (props.data.hasMine) {\r\n        return (\r\n          <div\r\n            className=\"cell open\"\r\n            onContextMenu={e => {\r\n              e.preventDefault();\r\n            }}\r\n            onClick={() => props.open(props.data)}\r\n          >\r\n            <img src=\"./assets/bomb-solid.svg\" alt=\"mines bomb svg icon\" />\r\n          </div>\r\n        );\r\n      } else if (props.data.count === 0) {\r\n        return (\r\n          <div\r\n            className=\"cell open\"\r\n            onContextMenu={e => {\r\n              e.preventDefault();\r\n              props.flag(props.data);\r\n            }}\r\n            onClick={() => props.open(props.data)}\r\n          />\r\n        );\r\n      } else {\r\n        return (\r\n          <div\r\n            className=\"cell open\"\r\n            onContextMenu={e => {\r\n              e.preventDefault();\r\n            }}\r\n            onClick={() => props.open(props.data)}\r\n          >\r\n            {props.data.count}\r\n          </div>\r\n        );\r\n      }\r\n    } else if (props.data.hasFlag) {\r\n      return (\r\n        <div\r\n          className=\"cell open-flag\"\r\n          onContextMenu={e => {\r\n            e.preventDefault();\r\n            props.flag(props.data);\r\n          }}\r\n          onClick={() => props.open(props.data)}\r\n        >\r\n          <img src=\"./assets/flag-regular.svg\" alt=\"svg icon flag\" />\r\n        </div>\r\n      );\r\n    } else {\r\n      return (\r\n        <div\r\n          className=\"cell\"\r\n          onContextMenu={e => {\r\n            e.preventDefault();\r\n            props.flag(props.data);\r\n          }}\r\n          onClick={() => props.open(props.data)}\r\n        />\r\n      );\r\n    }\r\n  };\r\n  return cell();\r\n};\r\n\r\nexport default Cell;\r\n","import React from 'react';\r\nimport Cell from '../cells/Cell';\r\n\r\nconst Row = props => {\r\n  const cells = props.cells.map((data, index) => {\r\n    return <Cell key={index} data={data} open={props.open} flag={props.flag}/>;\r\n  });\r\n  return <div className=\"row\">{cells}</div>;\r\n};\r\n\r\nexport default Row;\r\n","import React, { Component } from 'react';\r\nimport Row from '../row/Row';\r\n\r\nclass Board extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      rows: this.createBoard(props)\r\n    };\r\n  }\r\n\r\n  componentWillReceiveProps(nextProps) {\r\n    if (\r\n      this.props.openCells > nextProps.openCells ||\r\n      this.props.columns !== nextProps.columns\r\n    ) {\r\n      this.setState({\r\n        rows: this.createBoard(nextProps)\r\n      });\r\n    }\r\n  }\r\n\r\n  createBoard = props => {\r\n    // create grid based off the number of columns and rows passed in from props\r\n    let board = [];\r\n    for (let i = 0; i < props.rows; i++) {\r\n      board.push([]);\r\n      for (let j = 0; j < props.columns; j++) {\r\n        board[i].push({\r\n          x: j,\r\n          y: i,\r\n          count: 0,\r\n          isOpen: false,\r\n          hasMine: false,\r\n          hasFlag: false\r\n        });\r\n      }\r\n    }\r\n\r\n    // Add mines randomly\r\n    for (let i = 0; i < props.mines; i++) {\r\n      let randomRow = Math.floor(Math.random() * props.rows);\r\n      let randomCol = Math.floor(Math.random() * props.columns);\r\n\r\n      let cell = board[randomRow][randomCol];\r\n\r\n      if (cell.hasMine) {\r\n        // if it already has a mine send it back one in the loop and go to another random cell\r\n        i--;\r\n      } else {\r\n        cell.hasMine = true;\r\n      }\r\n    }\r\n    return board;\r\n  };\r\n\r\n  flag = cell => {\r\n    if (this.props.status === 'ended') {\r\n      return;\r\n    }\r\n\r\n    if (!cell.isOpen) {\r\n      let rows = this.state.rows;\r\n\r\n      cell.hasFlag = !cell.hasFlag;\r\n      this.setState({ rows });\r\n      this.props.changeFlagAmount(cell.hasFlag ? -1 : 1);\r\n    }\r\n  };\r\n\r\n  open = cell => {\r\n    const asyncCountMines = new Promise(resolve => {\r\n      const mines = this.findMines(cell);\r\n      resolve(mines);\r\n    });\r\n    asyncCountMines.then(numOfMines => {\r\n      const rows = this.state.rows;\r\n      const current = rows[cell.y][cell.x];\r\n\r\n      if (current.hasMine && this.props.openCells === 0) {\r\n        console.log('mine was on first click');\r\n        const newRows = this.createBoard(this.props);\r\n        this.setState({ rows: newRows }, () => {\r\n          this.open(cell);\r\n        });\r\n      } else {\r\n        if (!cell.hasFlag && !current.isOpen) {\r\n          this.props.handleCellClick();\r\n\r\n          current.isOpen = true;\r\n          current.count = numOfMines;\r\n\r\n          this.setState({ rows });\r\n\r\n          if (!current.hasMine && numOfMines === 0) {\r\n            this.findAroundCell(cell);\r\n          }\r\n\r\n          if (current.hasMine && this.props.openCells !== 0) {\r\n            this.props.endGame();\r\n          }\r\n        }\r\n      }\r\n    });\r\n  };\r\n\r\n  findMines = cell => {\r\n    const rows = this.state.rows;\r\n    let minesInProximity = 0;\r\n    // look for mines in a 1 cell block around the chosen cell\r\n    for (let row = -1; row <= 1; row++) {\r\n      for (let col = -1; col <= 1; col++) {\r\n        if (cell.y + row >= 0 && cell.x + col >= 0) {\r\n          if (cell.y + row < rows.length && cell.x + col < rows[0].length) {\r\n            if (\r\n              rows[cell.y + row][cell.x + col].hasMine &&\r\n              !(row === 0 && col === 0)\r\n            ) {\r\n              minesInProximity++;\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n    return minesInProximity;\r\n  };\r\n\r\n  findAroundCell = cell => {\r\n    const rows = this.state.rows;\r\n    // go through each cell and open them until mind is found, break\r\n    for (let row = -1; row <= 1; row++) {\r\n      for (let col = -1; col <= 1; col++) {\r\n        if (cell.y + row >= 0 && cell.x + col >= 0) {\r\n          if (cell.y + row < rows.length && cell.x + col < rows[0].length) {\r\n            if (\r\n              !rows[cell.y + row][cell.x + col].hasMine &&\r\n              !rows[cell.y + row][cell.x + col].isOpen\r\n            ) {\r\n              this.open(rows[cell.y + row][cell.x + col]);\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n  };\r\n\r\n  render() {\r\n    const rows = this.state.rows.map((cells, index) => (\r\n      <Row cells={cells} flag={this.flag} key={index} open={this.open} />\r\n    ));\r\n    return <div className=\"board\">{rows}</div>;\r\n  }\r\n}\r\n\r\nexport default Board;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst BoardHead = props => {\r\n  const minutes = Math.floor(props.time / 60);\r\n  const seconds = props.time - minutes * 60 || 0;\r\n\r\n  const formatedSeconds = seconds < 10 ? `0${seconds}` : seconds;\r\n\r\n  const timer = `${minutes}:${formatedSeconds}`;\r\n  const status =\r\n    props.status === 'running' || props.status === 'waiting' ? (\r\n      <img src=\"./assets/laugh-beam-regular.svg\" alt=\"happy svg smile emoji\" />\r\n    ) : (\r\n      <img src=\"./assets/sad-cry-regular.svg\" alt=\"sad svg smile emoji\" />\r\n    );\r\n  return (\r\n    <div className=\"board-head\">\r\n      <div className=\"flag-count\">{props.flags}</div>\r\n      <button className=\"reset\" onClick={props.reset}>\r\n        {status}\r\n      </button>\r\n      <div className=\"timer\">{timer}</div>\r\n    </div>\r\n  );\r\n};\r\n\r\nBoardHead.propTypes = {\r\n  time: PropTypes.number.isRequired,\r\n  flags: PropTypes.number.isRequired\r\n};\r\n\r\nexport default BoardHead;\r\n","import React, { Component } from 'react';\nimport './App.css';\nimport Board from './components/board/Board';\nimport BoardHead from './components/boardhead/BoardHead';\n\nexport default class Minesweeper extends Component {\n  constructor() {\n    super();\n\n    this.state = {\n      status: 'waiting', // can be winning, running, waiting\n      rows: 10,\n      columns: 10,\n      flags: 10,\n      mines: 10,\n      time: 0,\n      openCells: 0\n    };\n\n    this.baseState = this.state;\n  }\n\n  endGame = () => {\n    this.setState({\n      status: 'ended'\n    });\n  };\n\n  componentDidUpdate(nextProps, nextState) {\n    if (this.state.status === 'running') {\n      this.checkForWinner();\n    }\n  }\n  checkForWinner = () => {\n    if (\n      this.state.mines + this.state.openCells >=\n      this.state.rows * this.state.columns\n    ) {\n      this.setState(\n        {\n          status: 'winner'\n        },\n        alert('You won!')\n      );\n    }\n  };\n\n  reset = () => {\n    this.intervals.map(clearInterval);\n    this.setState(Object.assign({}, this.baseState), () => {\n      this.intervals = [];\n    });\n  };\n\n  componentWillMount() {\n    this.intervals = [];\n  }\n\n  tick = () => {\n    if (this.state.openCells > 0 && this.state.status === 'running') {\n      const time = this.state.time + 1;\n      this.setState({ time });\n    }\n  };\n\n  setInterval = (f, t) => {\n    this.intervals.push(setInterval(f, t));\n  };\n\n  hanldeCellClick = () => {\n    if (this.state.openCells === 0 && this.state.status !== 'running') {\n      this.setState(\n        {\n          status: 'running'\n        },\n        this.setInterval(this.tick, 1000)\n      );\n    }\n    this.setState(prevState => {\n      return {\n        openCells: prevState.openCells + 1\n      };\n    });\n  };\n\n  changeFlagAmount = amount => {\n    this.setState({ flags: this.state.flags + amount });\n  };\n\n  render() {\n    return (\n      // Passing in props from the state\n      <div className=\"minesweeper\">\n        <h2>Minesweeper with React!</h2>\n        <BoardHead\n          time={this.state.time}\n          flags={this.state.flags}\n          reset={this.reset}\n          status={this.state.status}\n        />\n        <Board\n          status={this.state.status}\n          rows={this.state.rows}\n          columns={this.state.columns}\n          mines={this.state.mines}\n          openCells={this.state.openCells}\n          handleCellClick={this.hanldeCellClick}\n          endGame={this.endGame}\n          changeFlagAmount={this.changeFlagAmount}\n        />\n      </div>\n    );\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport Minesweeper from './Minesweeper';\n\nReactDOM.render(<Minesweeper />, document.getElementById('root'));\n"],"sourceRoot":""}